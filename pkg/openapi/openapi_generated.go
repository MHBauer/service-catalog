// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kubernetes/pkg/genericapiserver/openapi/common"
)

var OpenAPIDefinitions *common.OpenAPIDefinitions = &common.OpenAPIDefinitions{
	"v1alpha1.Binding": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Binding represents a \"used by\" relationship between an application and an Instance.",
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1alpha1.BindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1alpha1.BindingStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"v1.ObjectMeta", "v1alpha1.BindingSpec", "v1alpha1.BindingStatus"},
	},
	"v1alpha1.BindingCondition": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BindingCondition represents an aspect of a Binding's status.",
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status", "reason", "message"},
			},
		},
		Dependencies: []string{},
	},
	"v1alpha1.BindingList": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BindingList is a list of Bindings",
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/v1alpha1.Binding"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"v1.ListMeta", "v1alpha1.Binding"},
	},
	"v1alpha1.BindingSpec": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BindingSpec represents a description of a Binding.",
				Properties: map[string]spec.Schema{
					"instanceRef": {
						SchemaProps: spec.SchemaProps{
							Description: "InstanceRef is the reference to the Instance this binding is to. Immutable.",
							Ref:         spec.MustCreateRef("#/definitions/v1.ObjectReference"),
						},
					},
					"appLabelSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "AppLabelSelector selects the pods in the Binding's namespace that should be injected with the results of the binding.  Immutable.",
							Ref:         spec.MustCreateRef("#/definitions/v1.LabelSelector"),
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/runtime.RawExtension"),
									},
								},
							},
						},
					},
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Names of subordinate objects to create",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"configMapName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbGuid": {
						SchemaProps: spec.SchemaProps{
							Description: "OSB-specific OSBGUID is the identity of this object for use with the OSB API. Immutable.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"instanceRef", "appLabelSelector", "parameters", "secretName", "serviceName", "configMapName", "osbGuid"},
			},
		},
		Dependencies: []string{
			"runtime.RawExtension", "v1.LabelSelector", "v1.ObjectReference"},
	},
	"v1alpha1.BindingStatus": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BindingStatus represents the current status of a Binding.",
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/v1alpha1.BindingCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"conditions"},
			},
		},
		Dependencies: []string{
			"v1alpha1.BindingCondition"},
	},
	"v1alpha1.Broker": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Broker represents an entity that provides ServiceClasses for use in the service catalog.",
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Non-namespaced.  The name of this resource in etcd is in ObjectMeta.Name.",
							Ref:         spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1alpha1.BrokerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1alpha1.BrokerStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"v1.ObjectMeta", "v1alpha1.BrokerSpec", "v1alpha1.BrokerStatus"},
	},
	"v1alpha1.BrokerCondition": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BrokerCondition represents an aspect of a Broker's status.",
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status", "reason", "message"},
			},
		},
		Dependencies: []string{},
	},
	"v1alpha1.BrokerList": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BrokerList is a list of Brokers.",
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/v1alpha1.Broker"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"v1.ListMeta", "v1alpha1.Broker"},
	},
	"v1alpha1.BrokerSpec": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BrokerSpec represents a description of a Broker.",
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL to communicate with the Broker via..",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authUsername": {
						SchemaProps: spec.SchemaProps{
							Description: "Auth credentials should live in an api.Secret that is documented to have \"username\" and \"password\" keys",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authPassword": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbGuid": {
						SchemaProps: spec.SchemaProps{
							Description: "OSB-specific OSBGUID is the identity of this object for use with the OSB API.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"url", "authUsername", "authPassword", "osbGuid"},
			},
		},
		Dependencies: []string{},
	},
	"v1alpha1.BrokerStatus": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BrokerStatus represents the current status of a Broker.",
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/v1alpha1.BrokerCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"conditions"},
			},
		},
		Dependencies: []string{
			"v1alpha1.BrokerCondition"},
	},
	"v1alpha1.Instance": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Instance represents a provisioned instance of a ServiceClass.",
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1alpha1.InstanceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1alpha1.InstanceStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"v1.ObjectMeta", "v1alpha1.InstanceSpec", "v1alpha1.InstanceStatus"},
	},
	"v1alpha1.InstanceCondition": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceCondition represents an aspect of an Instance's status.",
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status", "reason", "message"},
			},
		},
		Dependencies: []string{},
	},
	"v1alpha1.InstanceList": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceList is a list of instances",
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/v1alpha1.Instance"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"v1.ListMeta", "v1alpha1.Instance"},
	},
	"v1alpha1.InstanceSpec": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceSpec represents a description of an Instance.",
				Properties: map[string]spec.Schema{
					"serviceClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceClassName is the reference to the ServiceClass this is an instance of.  Immutable.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"planName": {
						SchemaProps: spec.SchemaProps{
							Description: "ServicePlanName is the reference to the ServicePlan for this instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/runtime.RawExtension"),
									},
								},
							},
						},
					},
					"osbGuid": {
						SchemaProps: spec.SchemaProps{
							Description: "OSB-specific OSBGUID is the identity of this object for use with the OSB SB API. Immutable.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"osbCredentials": {
						SchemaProps: spec.SchemaProps{
							Description: "OSB-specific",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"osbDashboardURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbInternalID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbServiceID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbPlanID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbSpaceGUID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbLastOperation": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"serviceClassName", "planName", "parameters", "osbGuid", "osbCredentials", "osbDashboardURL", "osbInternalID", "osbServiceID", "osbPlanID", "osbType", "osbSpaceGUID", "osbLastOperation"},
			},
		},
		Dependencies: []string{
			"runtime.RawExtension"},
	},
	"v1alpha1.InstanceStatus": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceStatus represents the current status of an Instance.",
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/v1alpha1.InstanceCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"conditions"},
			},
		},
		Dependencies: []string{
			"v1alpha1.InstanceCondition"},
	},
	"v1alpha1.ServiceClass": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceClass represents an offering in the service catalog.",
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
						},
					},
					"brokerName": {
						SchemaProps: spec.SchemaProps{
							Description: "BrokerName is the reference to the Broker that provides this service. Immutable.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bindable": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"plans": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/v1alpha1.ServicePlan"),
									},
								},
							},
						},
					},
					"planUpdatable": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"osbGuid": {
						SchemaProps: spec.SchemaProps{
							Description: "OSB-specific OSBGUID is the identity of this object for use with the OSB API. Immutable.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"osbTags": {
						SchemaProps: spec.SchemaProps{
							Description: "OSB-specific",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"osbRequires": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"osbMaxDBPerNode": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbDashboardOAuth2ClientID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbDashboardSecret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"osbDashboardRedirectURI": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata fields",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"displayName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"longDescription": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerDisplayName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"documentationUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"supportUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"brokerName", "bindable", "plans", "planUpdatable", "osbGuid", "osbTags", "osbRequires", "osbMaxDBPerNode", "osbDashboardOAuth2ClientID", "osbDashboardSecret", "osbDashboardRedirectURI"},
			},
		},
		Dependencies: []string{
			"v1.ObjectMeta", "v1alpha1.ServicePlan"},
	},
	"v1alpha1.ServiceClassList": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceClassList is a list of ServiceClasses",
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: spec.MustCreateRef("#/definitions/v1alpha1.ServiceClass"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"v1.ListMeta", "v1alpha1.ServiceClass"},
	},
	"v1alpha1.ServicePlan": {
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServicePlan represents a tier of a ServiceClass.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "CLI-friendly name of this plan",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"osbGuid": {
						SchemaProps: spec.SchemaProps{
							Description: "OSB-specific OSBGUID is the identity of this object for use with the OSB API. Immutable.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"osbFree": {
						SchemaProps: spec.SchemaProps{
							Description: "OSB-specific",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bullets": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"displayName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "osbGuid", "osbFree"},
			},
		},
		Dependencies: []string{},
	},
}
